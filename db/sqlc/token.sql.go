// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: token.sql

package db

import (
	"context"
	"time"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
  token,
  username,
  issued_at,
  expired_at
) VALUES (
  $1, $2, $3,$4
) RETURNING token, username, issued_at, expired_at
`

type CreateTokenParams struct {
	Token     string
	Username  string
	IssuedAt  time.Time
	ExpiredAt time.Time
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createToken,
		arg.Token,
		arg.Username,
		arg.IssuedAt,
		arg.ExpiredAt,
	)
	var i Token
	err := row.Scan(
		&i.Token,
		&i.Username,
		&i.IssuedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getToken = `-- name: GetToken :one
SELECT token, username, issued_at, expired_at FROM tokens
WHERE username= $1 AND expired_at > Now() LIMIT 1
`

func (q *Queries) GetToken(ctx context.Context, username string) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, username)
	var i Token
	err := row.Scan(
		&i.Token,
		&i.Username,
		&i.IssuedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateToken = `-- name: UpdateToken :one
UPDATE tokens
SET expired_at = Now()
WHERE username = $1
RETURNING token, username, issued_at, expired_at
`

func (q *Queries) UpdateToken(ctx context.Context, username string) (Token, error) {
	row := q.db.QueryRowContext(ctx, updateToken, username)
	var i Token
	err := row.Scan(
		&i.Token,
		&i.Username,
		&i.IssuedAt,
		&i.ExpiredAt,
	)
	return i, err
}
